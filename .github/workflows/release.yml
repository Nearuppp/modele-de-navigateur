name: Release

on:
  push:
    tags:
      - 'v*' # Se déclenche sur les tags commençant par 'v' (ex: v1.0.0)
  workflow_dispatch: # Permet de déclencher manuellement

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: macos-latest
            build_command: npm run build:mac
            artifact_name: macOS
          - os: ubuntu-latest
            build_command: npm run build:linux
            artifact_name: Linux
          - os: windows-latest
            build_command: npm run build:win
            artifact_name: Windows
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci # Faster than npm install

      - name: Build Angular app
        run: npm run build # Build the Angular app before packaging

      - name: Build Electron app for ${{ matrix.artifact_name }}
        run: ${{ matrix.build_command }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-build
          path: |
            releases/*.exe
            releases/*.dmg
            releases/*.AppImage
            releases/*.deb
            releases/*.rpm
            releases/*.snap
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # only run for tags starting with 'v'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List downloaded files
        run: |
          echo "=== Structure des artifacts téléchargés ==="
          find artifacts/ -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.snap" || echo "Aucun exécutable trouvé"
          echo "=== Tous les fichiers dans artifacts ==="
          find artifacts/ -type f | head -20

      - name: Prepare release executables
        run: |
          mkdir -p release-executables
          
          # Copier seulement les vrais exécutables avec des noms clairs
          find artifacts/ -name "*.exe" -type f -exec cp {} release-executables/ \;
          find artifacts/ -name "*.dmg" -type f -exec cp {} release-executables/ \;
          find artifacts/ -name "*.AppImage" -type f -exec cp {} release-executables/ \;
          find artifacts/ -name "*.deb" -type f -exec cp {} release-executables/ \;
          find artifacts/ -name "*.rpm" -type f -exec cp {} release-executables/ \;
          find artifacts/ -name "*.snap" -type f -exec cp {} release-executables/ \;
          
          echo "=== Fichiers prêts pour la release ==="
          ls -la release-executables/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-executables/*
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}