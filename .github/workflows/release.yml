name: Release

on:
  push:
    tags:
      - 'v*' # Se déclenche sur les tags commençant par 'v' (ex: v1.0.0)
  workflow_dispatch: # Permet de déclencher manuellement

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: macos-latest
            build_command: npm run build:mac
            artifact_name: macOS
          - os: ubuntu-latest
            build_command: npm run build:linux
            artifact_name: Linux
          - os: windows-latest
            build_command: npm run build:win
            artifact_name: Windows
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Angular app
        run: npm run build

      - name: Build Electron app for ${{ matrix.artifact_name }}
        run: ${{ matrix.build_command }}

      - name: List releases directory (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "Contents of releases directory:"
          if (Test-Path releases) { Get-ChildItem releases -Recurse } else { echo "No releases directory found" }
        shell: pwsh
        
      - name: List releases directory (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "Contents of releases directory:"
          ls -la releases/ 2>/dev/null || echo "No releases directory found"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-build
          path: releases/
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: List all artifacts
        run: |
          echo "All downloaded artifacts:"
          ls -R artifacts/ 2>/dev/null || echo "No artifacts found"
          
      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Find and copy release files with more flexible patterns
          if [ -d "artifacts" ]; then
            # Copy all installer/executable files
            find artifacts/ \( -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.snap" \) -type f -exec cp {} release-files/ \;
            
            echo "Final release files:"
            ls -l release-files/ 2>/dev/null || echo "No files copied"
          else
            echo "No artifacts directory found"
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-files/*.exe
            release-files/*.dmg
            release-files/*.AppImage
            release-files/*.deb
            release-files/*.rpm
            release-files/*.snap
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}